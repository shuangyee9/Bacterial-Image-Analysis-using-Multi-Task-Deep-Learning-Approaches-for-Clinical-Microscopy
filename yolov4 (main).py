# -*- coding: utf-8 -*-
"""yolov4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EWFde0S465lnxO-ZGX4djkLV2jJtshgp

A folder named ***yolov4*** has been created in the google drive.

Next, another folder named ***training*** hal also been created inside the ***yolov4*** folder. This is where the trained weights will be saved. (This path is mentioned in the ***obj.data*** file which will be uploaded later)
"""

# Commented out IPython magic to ensure Python compatibility.
# Mount drive
# %cd ..
from google.colab import drive
drive.mount('/content/gdrive')

# this creates a symbolic link so that now the path /content/gdrive/My\ Drive/ is equal to /mydrive
!ln -s /content/gdrive/My\ Drive/ /mydrive

# List the contents of /mydrive
!ls /mydrive

# Navigate to /mydrive/yolov4
# %cd /mydrive/yolov4

# Clone Darknet GitHub repository

!git clone https://github.com/AlexeyAB/darknet

# Commented out IPython magic to ensure Python compatibility.
# Change makefile to have GPU and OPENCV enabled
# also set CUDNN, CUDNN_HALF and LIBSO to 1

# %cd darknet/
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile
!sed -i 's/LIBSO=0/LIBSO=1/' Makefile

# Build darknet
!make

"""The current working directory is /mydrive/yolov4/darknet

"""

# Commented out IPython magic to ensure Python compatibility.
# Clean the data and cfg folders first except the labels folder in data folder which is required for writing label names on the detection boxes

# %cd data/
!find -maxdepth 1 -type f -exec rm -rf {} \;
# %cd ..

# %rm -rf cfg/
# %mkdir cfg

"""Upload the following folders in ***yolov4*** folder:
*   obj.zip
*   yolov4-custom.cfg  
*   obj.data
*   obj.name
*   process.py




"""

# Unzip the obj.zip dataset and its contents so that they are now in /darknet/data/ folder

!unzip /mydrive/yolov4/obj.zip -d data/

# Copy the yolov4-custom.cfg file so that it is now in /darknet/cfg/ folder

!cp /mydrive/yolov4/yolov4-custom.cfg cfg

# Verify if the custom file is in cfg folder
!ls cfg/

# Copy the obj.names and obj.data files from your drive so that they are now in /darknet/data/ folder

!cp /mydrive/yolov4/obj.names data
!cp /mydrive/yolov4/obj.data  data

# Verify if the above files are in data folder
!ls data/

# Copy the process.py file to the current darknet directory

!cp /mydrive/yolov4/process.py .

# Run process.py to create the train.txt and test.txt files in darknet/data folder (where train.txt has paths to 70% of the images and test.txt has paths to 30% of the images)
!python process.py

# List the contents of data folder to check if the train.txt and test.txt files have been created
!ls data/

"""Transfer learning is used. Instead of training a model from scratch, the pre-trained YOLOv4 weights which have been trained up to 137 convolutional layers is used."""

# Download the yolov4 pre-trained weights file
!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137

# Train the custom detector

!./darknet detector train data/obj.data cfg/yolov4-custom.cfg yolov4.conv.137 -dont_show

"""### **To restart your training (In case the training does not finish and Google Colab get disconnected)**

Every time if getting disconnected or lose session on Google Colab, run the following steps to continue training: mount the drive, edit makefile, build darknet, restart training from where we left off by using the weights that were saved last. The weights are saved every 100 iterations as yolov4-custom_last.weights in the yolov4/training folder on the drive.


"""

# Commented out IPython magic to ensure Python compatibility.
# Mount drive
# %cd ..
from google.colab import drive
drive.mount('/content/gdrive')

# to create a symbolic link so that now the path /content/gdrive/My\ Drive/ is equal to /mydrive
!ln -s /content/gdrive/My\ Drive/ /mydrive

# List the contents of /mydrive
!ls /mydrive

# Navigate to /mydrive/yolov4
# %cd /mydrive/yolov4

# Commented out IPython magic to ensure Python compatibility.
# Change makefile to have GPU and OPENCV enabled
# Set CUDNN, CUDNN_HALF and LIBSO to 1

# %cd darknet/
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile
!sed -i 's/LIBSO=0/LIBSO=1/' Makefile

# Build darknet
!make

# Restart training of custom detector where you left off(using the weights that were saved last)

!./darknet detector train data/obj.data cfg/yolov4-custom.cfg /mydrive/yolov4/training/yolov4-custom_last.weights -dont_show -map

"""### **To check performance**"""

# Commented out IPython magic to ensure Python compatibility.
# Define helper function imShow
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

# Check training chart (only works if the training does not get interrupted)

imShow('chart.png')

# Check the mAP for all the weights saved every 1000 iterations to see which gives the best results.

!./darknet detector map data/obj.data cfg/yolov4-custom.cfg /mydrive/yolov4/training/yolov4-custom_6000.weights -points 0

"""## **To test the custom object detector**

Make changes to your custom config file
*   change line batch to batch=1
*   change line subdivisions to subdivisions=1
"""

# Commented out IPython magic to ensure Python compatibility.
# Set custom cfg to test mode
# %cd cfg
!sed -i 's/batch=64/batch=1/' yolov4-custom.cfg
!sed -i 's/subdivisions=16/subdivisions=1/' yolov4-custom.cfg
# %cd ..

# Commented out IPython magic to ensure Python compatibility.
# Define helper function imShow
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

# Run custom detector on test image

!./darknet detector test data/obj.data cfg/yolov4-custom.cfg /mydrive/yolov4/training/yolov4-custom_6000.weights /mydrive/test_images/zfh_original_pos_2_frame_1_3_670aa4b2-e4ac-4364-86f2-34457bf30128.png -thresh 0.25
imShow('predictions.jpg')

# Run custom detector on test image

!./darknet detector test data/obj.data cfg/yolov4-custom.cfg /mydrive/yolov4/training/yolov4-custom_6000.weights /mydrive/test_images/zr90_original_pos_0_frame_15_3_3f6451e2-0667-4408-b2f8-f89e8c756f56.png -thresh 0.25
imShow('predictions.jpg')